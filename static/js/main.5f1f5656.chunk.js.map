{"version":3,"sources":["components/Board.js","components/Shapes.js","App.js","serviceWorker.js","index.js"],"names":["Board","props","className","shape","onDrop","e","data","dataTransfer","getData","theShape","document","getElementById","target","appendChild","style","border","clearData","onDragOver","preventDefault","Shapes","dragStart","setData","id","dragOver","stopPropagation","num","whatShape","min","max","allShapes","i","Math","floor","random","push","key","draggable","onDragStart","makeShape","numberShapes","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAoCeA,MAjCf,SAAeC,GAsBX,OACI,yBAAKC,UAAWD,EAAME,MAAQ,QAC1BC,OAjBR,SAAcC,GACV,IAAMC,EAAOD,EAAEE,aAAaC,QAAQ,UAC9BC,EAAWC,SAASC,eAAeL,GACzCD,EAAEO,OAAOC,YAAYJ,GAEhBJ,EAAEE,aAAaC,QAAQ,SAAW,UAAaH,EAAEO,OAAOV,UAEzDO,EAASK,MAAMC,OAAS,oBAGxBN,EAASK,MAAMC,OAAS,gBAE5BV,EAAEE,aAAaS,aAMXC,WAvBR,SAAkBZ,GACdA,EAAEa,mBAyBE,6BAAMjB,EAAME,SCuBTgB,MAnDf,SAAgBlB,GAiCZ,SAASmB,EAAUf,GAGfA,EAAEE,aAAac,QAAQ,SAAUhB,EAAEO,OAAOU,IAC1CjB,EAAEE,aAAac,QAAQ,QAAShB,EAAEO,OAAOV,WAG7C,SAASqB,EAASlB,GACdA,EAAEmB,kBAGN,OACI,yBAAKtB,UAAU,cA3CnB,SAAmBuB,GAMf,SAASC,EAAUD,GACf,OAAY,IAARA,EACO,UACQ,IAARA,EACA,SACG,WAIlB,IADA,IAZmBE,EAAKC,EAYpBC,EAAY,GACPC,EAAI,EAAGA,EAAIL,EAAKK,IAAK,CAC1B,IAAI3B,EAAQuB,GAdGC,EAciB,EAdZC,EAce,EAb5BG,KAAKC,MAAMD,KAAKE,UAAYL,EAAMD,EAAM,IAAMA,IAcrDE,EAAUK,KACN,yBAAKhC,UAAWC,EACZgC,IAAKL,EACLR,GAAI,OAASQ,EACbM,WAAW,EACXC,YAAajB,EACbH,WAAYM,GACXpB,IAIb,OAAO0B,EAgBFS,CAAUrC,EAAMsC,gBC5BdC,MAhBf,WACE,OACE,yBAAKtC,UAAU,OACb,yBAAKA,UAAU,eACb,0CACA,uEACA,kBAAC,EAAD,CAAQqC,aAAc,MAExB,kBAAC,EAAD,CAAOpC,MAAO,aACd,kBAAC,EAAD,CAAOA,MAAO,WACd,kBAAC,EAAD,CAAOA,MAAO,cCHAsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFtC,SAASC,eAAe,SDyHpB,kBAAmBsC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5f1f5656.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css'\r\n\r\nfunction Board(props) {\r\n\r\n    function dragOver(e) {\r\n        e.preventDefault();\r\n\r\n    }\r\n\r\n    function drop(e) {\r\n        const data = e.dataTransfer.getData(\"thelot\");\r\n        const theShape = document.getElementById(data)\r\n        e.target.appendChild(theShape);\r\n\r\n        if ((e.dataTransfer.getData(\"check\") + \"board\") === e.target.className) {\r\n            //match\r\n            theShape.style.border = \"#92c142 5px solid\"\r\n        } else (\r\n            //no match\r\n            theShape.style.border = \"red 5px solid\"\r\n        )\r\n        e.dataTransfer.clearData();\r\n    }\r\n\r\n    return (\r\n        <div className={props.shape + \"board\"}\r\n            onDrop={drop}\r\n            onDragOver={dragOver}\r\n        >\r\n\r\n            <div>{props.shape}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Board;","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Shapes(props) {\r\n\r\n    function makeShape(num) {\r\n\r\n        function randomNum(min, max) {\r\n            return Math.floor(Math.random() * (max - min + 1)) + min;\r\n        }\r\n\r\n        function whatShape(num) {\r\n            if (num === 3) {\r\n                return \"diamond\"\r\n            } else if (num === 2) {\r\n                return \"square\"\r\n            } else return \"triangle\"\r\n        }\r\n\r\n        let allShapes = []\r\n        for (let i = 0; i < num; i++) {\r\n            let shape = whatShape(randomNum(1, 3))\r\n            allShapes.push(\r\n                <div className={shape}\r\n                    key={i}\r\n                    id={\"move\" + i}\r\n                    draggable={true}\r\n                    onDragStart={dragStart}\r\n                    onDragOver={dragOver}>\r\n                    {shape}\r\n                </div>\r\n            )\r\n        }\r\n        return allShapes\r\n    }\r\n\r\n    function dragStart(e) {\r\n        // e.currentTarget.style.border = \"pink 2px solid\";\r\n\r\n        e.dataTransfer.setData(\"thelot\", e.target.id)\r\n        e.dataTransfer.setData(\"check\", e.target.className)\r\n    }\r\n\r\n    function dragOver(e) {\r\n        e.stopPropagation();\r\n    }\r\n\r\n    return (\r\n        <div className=\"shapes-box\">\r\n            {makeShape(props.numberShapes)}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Shapes;\r\n","import React from 'react';\nimport './App.css';\nimport Board from './components/Board.js';\nimport Shapes from './components/Shapes.js';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"explanation\">\n        <h1>Shape Sort</h1>\n        <p>Sort until all items have a green border</p>\n        <Shapes numberShapes={12} />\n      </div>\n      <Board shape={\"triangle\"} />\n      <Board shape={\"square\"} />\n      <Board shape={\"diamond\"} />\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}